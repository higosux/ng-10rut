{"version":3,"file":"ng9-rut.js","sources":["ng9-rut/lib/ng9-rut.service.ts","ng9-rut/lib/rut.pipe.ts","ng9-rut/lib/rut.directive.ts","ng9-rut/lib/rut.validator.ts","ng9-rut/lib/rut-value-accessor.ts","ng9-rut/lib/ng9-rut.module.ts","ng9-rut/public-api.ts","ng9-rut/ng9-rut.ts"],"names":["rutHelpers.rutClean","rutHelpers.rutFormat"],"mappings":";;;;;;;;IAOE;AAEK,KAFY;AACnB;IAHa,aAAa,wBAHzB,UAAU,CAAC,cACV,UAAU,EAAE,MAAM,UACnB;AAAC,QACW,aAAa,CAGzB;;;;;gDACD;AAAC,wBATD;AAAE,CAKF;AAAK;AAAC;AAEa,ICDnB;AAAqB,KAIpB;AACD,IAJS,2BAAS,GAAhB,UAAiB,KAAa;AAAI,QAChC,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;AAC5B,KAAG;IAHU,OAAO,wBAHnB,IAAI,CAAC,cACJ,IAAI,EAAE,KAAK,WACZ;AAAC,QACW,OAAO,CAInB;;;;;;gDACD;AAAC,IADD,cAAC;AACA,CALD;AAAK;AAAC;AACA,ICOJ;AACQ,QAAN,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,KAAG;AACH,IACS,8BAAO,GAAd,UAAe,EAAS;AAC1B,QAAI,IAAI,gBAAgB,GAAwC,EAAE,CAAC,MAAM,CAAC;AAC1E,QAAI,gBAAgB,CAAC,KAAK,GAAGA,QAAmB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACzE,KAAG;AAEH,IAAS,6BAAM,GAAb,UAAc,EAAS;AACzB,QAAI,IAAI,gBAAgB,GAAwC,EAAE,CAAC,MAAM,CAAC;AAC1E,QAAI,gBAAgB,CAAC,KAAK,GAAGC,SAAoB,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAChF,KAAG;AAEH,IAAS,+BAAQ,GAAf,UAAgB,EAAS;AAC3B,QAAI,IAAI,gBAAgB,GAAwC,EAAE,CAAC,MAAM,CAAC;AAC1E,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAACD,QAAmB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;AACrE,KAAG;AACF,IApBW;AAAa,QAAtB,MAAM,EAAE;AAAC,mDAAoC;IADnC,YAAY,wBARxB,SAAS,CAAC,cACT,QAAQ,EAAE,aAAa;SACvB,IAAI,EAAE,kBACJ,QAAQ,EAAE,gBAAgB,kBAC1B,SAAS,EAAE,iBAAiB,kBAC5B,SAAS,EAAE,kBAAkB,eAC9B;CACF,CAAC,QACW,YAAY,CAqBxB;;;;;;;;;;;;;;oBACD;AAAC,IADD,mBAAC;AACA,CAtBD;AAAK;AAAC,SCPU,kBAAkB,CAAC,WAAqB;AACxD,IAAE,OAAO,UAAC,CAAc;AAAI,QACxB,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE;AAClB,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,QAAI,OAAO,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;AAC9D,KAAG,CAAC;AACJ,CAAC;AACD;AAEkC,IAQhC;AACQ,QAAN,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;AACrD,KAAG;AACH,qBANa,YAAY;AAAE,IAOlB,+BAAQ,GAAf,UAAgB,CAAc;AAChC,QAAI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAC7B,KAAG;AACF;IAVY,YAAY,yCANxB,SAAS,CAAC,cACT,QAAQ,EAAE;kDAAmD,cAC7D,SAAS,EAAE,kBACT,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,cAAY,GAAA,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;SACrF,WACF,CAAC,QACW,YAAY,CAUxB;;;;;;;;;;gDACD;AAAC,IADD,mBAAC;AACA,CAXD;AAAK;ACbL,IAAM,kBAAkB,GAAQ;AAChC,IAAE,OAAO,EAAE,iBAAiB;AAC5B,IAAE,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,gBAAgB,GAAA,CAAC;AACjD,IAAE,KAAK,EAAE,IAAI;AACb,CAAC,CAAC;AACF;AAGM,IAOJ,0BACU,QAAmB,EACnB,UAAsB;AAChC,QAFU,aAAQ,GAAR,QAAQ,CAAW;AAAC,QACpB,eAAU,GAAV,UAAU,CAAY;AAAC,QAG1B,aAAQ,GAAQ,UAAC,CAAC,KAAkB,CAAC;AAC9C,QAAS,cAAS,GAAQ,eAAmB,CAAC;AAC9C,KAJS;AACT,IAIS,qCAAU,GAAjB,UAAkB,KAAU;AAAI,QAC9B,IAAI,eAAe,GAAW,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AACzD,QAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;AACvF,KAAG;AAEH,IAAS,2CAAgB,GAAvB,UAAwB,EAAoB,IAAU,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE;AAC5E,IAAQ,4CAAiB,GAAxB,UAAyB,EAAc,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE;AACxE;AAC2D,gBAftC,SAAS;AAC7B,gBAAsB,UAAU;AACjC;IAJY,gBAAgB,wBAR5B,SAAS,CAAC,cACT,QAAQ,EAAE,kBAAkB,cAC5B,IAAI,EAAE,kBACJ,aAAa,EAAE,kBAAkB,kBACjC;EAAQ,EAAE,mBAAmB,eAC9B,cACD,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAChC,CAAC,QACW,gBAAgB,CAgB5B;;;;;;;;;;;;;uGACD;AAAC,IADD,uBAAC;AACA,CAjBD;AAAK;AAAC;AAAgD,ICKtD;AAA0B,KAAG;IAAhB,YAAY,wBAjBxB,QAAQ,CAAC,cACR;MAAY,EAAE,kBACZ,OAAO,kBACP,YAAY,kBACZ,YAAY,kBACZ,gBAAgB;EACjB,cACD;GAAS,EAAE;aACT,YAAY,eACb,cACD,OAAO,EAAE,kBACP,OAAO,kBACP,YAAY,kBACZ,YAAY,kBACZ,gBAAgB,eACjB,WACF,CAAC,QACW,YAAY,CAAI;;;;;;;;;;;;;;;;;;;;gDAC7B;AAAC,IAD2B,mBAAC;AAC5B,CADD;AAAK;ACzBL;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACqF","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Ng9RutService {\n\n  constructor() { }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { rutFormat } from 'rut-helpers';\n\n@Pipe({\n  name: 'rut',\n})\nexport class RutPipe implements PipeTransform {\n  public transform(value: string): string {\n    return rutFormat(value);\n  }\n}\n","import {Directive, EventEmitter, Output} from '@angular/core';\nimport * as rutHelpers from 'rut-helpers';\n\n@Directive({\n  selector: '[formatRut]',\n  host: {\n    '(blur)': 'onBlur($event)',\n    '(focus)': 'onFocus($event)',\n    '(input)': 'onChange($event)',\n  },\n})\nexport class RutDirective {\n  @Output() public rutChange: EventEmitter<any>;\n\n  constructor() {\n    this.rutChange = new EventEmitter();\n  }\n\n  public onFocus(ev: Event) {\n    let htmlInputElement: HTMLInputElement = <HTMLInputElement> ev.target;\n    htmlInputElement.value = rutHelpers.rutClean(htmlInputElement.value);\n  }\n\n  public onBlur(ev: Event) {\n    let htmlInputElement: HTMLInputElement = <HTMLInputElement> ev.target;\n    htmlInputElement.value = rutHelpers.rutFormat(htmlInputElement.value) || '';\n  }\n\n  public onChange(ev: Event) {\n    let htmlInputElement: HTMLInputElement = <HTMLInputElement> ev.target;\n    this.rutChange.emit(rutHelpers.rutClean(htmlInputElement.value));\n  }\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, FormControl } from '@angular/forms';\nimport { rutValidate } from 'rut-helpers';\n\nexport function validateRutFactory(rutValidate: Function) {\n  return (c: FormControl) => {    \n    if (!c.value) {\n      return null;\n    }\n    return rutValidate(c.value) ? null : { invalidRut: true };\n  };\n}\n\n@Directive({\n  selector: '[validateRut][ngModel],[validateRut][formControl]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => RutValidator), multi: true },\n  ],\n})\nexport class RutValidator {\n  private validator: Function;\n  \n  constructor() {\n    this.validator = validateRutFactory(rutValidate);\n  }\n  \n  public validate(c: FormControl) {\n    return this.validator(c);\n  }\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { rutFormat } from 'rut-helpers';\n\nimport { ElementRef, Renderer2 } from '@angular/core';\n\nconst RUT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RutValueAccessor),\n  multi: true,\n};\n\n@Directive({\n  selector: 'input[formatRut]',\n  host: {\n    '(rutChange)': 'onChange($event)',\n    '(blur)': 'onTouched($event)',\n  },\n  providers: [RUT_VALUE_ACCESSOR],\n})\nexport class RutValueAccessor implements ControlValueAccessor {\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    ) { }\n\n  public onChange: any = (_) => { /*Empty*/ };\n  public onTouched: any = () => { /*Empty*/ };\n\n  public writeValue(value: any): void {\n    let normalizedValue: string = rutFormat(value) || '';\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  public registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  public registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n}\n","import { NgModule } from '@angular/core';\nimport { RutPipe } from './rut.pipe';\nimport { RutDirective } from './rut.directive';\nimport { RutValidator } from './rut.validator';\nimport { RutValueAccessor } from './rut-value-accessor';\n\n\n\n@NgModule({\n  declarations: [\n    RutPipe,\n    RutDirective,\n    RutValidator,\n    RutValueAccessor,\n  ],\n  providers: [\n    RutValidator,\n  ],\n  exports: [\n    RutPipe,\n    RutDirective,\n    RutValidator,\n    RutValueAccessor,\n  ],\n})\nexport class Ng9RutModule { }\n","/*\n * Public API Surface of ng9-rut\n */\n\nexport * from './lib/ng9-rut.service';\nexport * from './lib/ng9-rut.module';\nexport * from './lib/rut-value-accessor';\nexport * from './lib/rut.directive';\nexport * from './lib/rut.pipe';\nexport * from './lib/rut.validator';\nexport * from 'rut-helpers';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}