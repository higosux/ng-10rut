{"version":3,"file":"ng9-rut.js","sources":["ng9-rut/lib/ng9-rut.service.ts","ng9-rut/lib/rut.pipe.ts","ng9-rut/lib/rut.directive.ts","ng9-rut/lib/rut.validator.ts","ng9-rut/lib/rut-value-accessor.ts","ng9-rut/lib/ng9-rut.module.ts","ng9-rut/public-api.ts","ng9-rut/ng9-rut.ts"],"names":["rutHelpers.rutClean","rutHelpers.rutFormat"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Ng9RutService {\n\n  constructor() { }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { rutFormat } from 'rut-helpers';\n\n@Pipe({\n  name: 'rut',\n})\nexport class RutPipe implements PipeTransform {\n  public transform(value: string): string {\n    return rutFormat(value);\n  }\n}\n","import {Directive, EventEmitter, Output} from '@angular/core';\nimport * as rutHelpers from 'rut-helpers';\n\n@Directive({\n  selector: '[formatRut]',\n  host: {\n    '(blur)': 'onBlur($event)',\n    '(focus)': 'onFocus($event)',\n    '(input)': 'onChange($event)',\n  },\n})\nexport class RutDirective {\n  @Output() public rutChange: EventEmitter<any>;\n\n  constructor() {\n    this.rutChange = new EventEmitter();\n  }\n\n  public onFocus(ev: Event) {\n    let htmlInputElement: HTMLInputElement = <HTMLInputElement> ev.target;\n    htmlInputElement.value = rutHelpers.rutClean(htmlInputElement.value);\n  }\n\n  public onBlur(ev: Event) {\n    let htmlInputElement: HTMLInputElement = <HTMLInputElement> ev.target;\n    htmlInputElement.value = rutHelpers.rutFormat(htmlInputElement.value) || '';\n  }\n\n  public onChange(ev: Event) {\n    let htmlInputElement: HTMLInputElement = <HTMLInputElement> ev.target;\n    this.rutChange.emit(rutHelpers.rutClean(htmlInputElement.value));\n  }\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, FormControl } from '@angular/forms';\nimport { rutValidate } from 'rut-helpers';\n\nexport function validateRutFactory(rutValidate: Function) {\n  return (c: FormControl) => {    \n    if (!c.value) {\n      return null;\n    }\n    return rutValidate(c.value) ? null : { invalidRut: true };\n  };\n}\n\n@Directive({\n  selector: '[validateRut][ngModel],[validateRut][formControl]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => RutValidator), multi: true },\n  ],\n})\nexport class RutValidator {\n  private validator: Function;\n  \n  constructor() {\n    this.validator = validateRutFactory(rutValidate);\n  }\n  \n  public validate(c: FormControl) {\n    return this.validator(c);\n  }\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { rutFormat } from 'rut-helpers';\n\nimport { ElementRef, Renderer2 } from '@angular/core';\n\nconst RUT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RutValueAccessor),\n  multi: true,\n};\n\n@Directive({\n  selector: 'input[formatRut]',\n  host: {\n    '(rutChange)': 'onChange($event)',\n    '(blur)': 'onTouched($event)',\n  },\n  providers: [RUT_VALUE_ACCESSOR],\n})\nexport class RutValueAccessor implements ControlValueAccessor {\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    ) { }\n\n  public onChange: any = (_) => { /*Empty*/ };\n  public onTouched: any = () => { /*Empty*/ };\n\n  public writeValue(value: any): void {\n    let normalizedValue: string = rutFormat(value) || '';\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  public registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  public registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n}\n","import { NgModule } from '@angular/core';\nimport { RutPipe } from './rut.pipe';\nimport { RutDirective } from './rut.directive';\nimport { RutValidator } from './rut.validator';\nimport { RutValueAccessor } from './rut-value-accessor';\n\n\n\n@NgModule({\n  declarations: [\n    RutPipe,\n    RutDirective,\n    RutValidator,\n    RutValueAccessor,\n  ],\n  providers: [\n    RutValidator,\n  ],\n  exports: [\n    RutPipe,\n    RutDirective,\n    RutValidator,\n    RutValueAccessor,\n  ],\n})\nexport class Ng9RutModule { }\n","/*\n * Public API Surface of ng9-rut\n */\n\nexport * from './lib/ng9-rut.service';\nexport * from './lib/ng9-rut.module';\nexport * from './lib/rut-value-accessor';\nexport * from './lib/rut.directive';\nexport * from './lib/rut.pipe';\nexport * from './lib/rut.validator';\nexport * from 'rut-helpers';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}